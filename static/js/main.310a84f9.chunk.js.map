{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Dialog.module.css","components/Users/Users.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.module.css","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","redux/profileReducer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Setting/Setting.tsx","components/Navbar/Friends/Friends.tsx","redux/dialogsReducer.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","redux/usersReducer.ts","components/Users/UsersContainer.tsx","components/Users/Users.tsx","App.tsx","redux/sidebarReducer.tsx","redux/redux-store.tsx","index.tsx"],"names":["module","exports","Header","className","s","header","src","Navbar","prpps","nav","item","to","activeClassName","activelink","ProfileInfo","content","descriptionBlock","Post","props","active","message","likesCount","ADD_POST","UPDATE_NEW_POST_TEXT","initialState","postsData","id","newPostText","profileReducer","state","action","type","newPost","Date","getTime","newText","MyPostsContainer","connect","profilePage","dispatch","addPost","addPostAC","onPostChange","text","postElements","map","p","newPostElement","React","createRef","postsBlock","onChange","e","currentTarget","value","ref","onClick","current","posts","Profile","News","Music","Setting","MyFriends","UPDATE_NEW_MESSAGE_BODY","SEND_MESSAGE","dialogs","name","messages","newMessageBody","dialogsReducer","body","Message","dialog","DialogItem","path","Dialogs","dialogsElements","dialogsPage","d","messagesElements","m","dialogsItems","target","updateNewMessageBody","placeholder","sendMessage","DialogsContainer","updateNewMessageBodyAC","users","UsersContainer","usersPageData","followUser","userId","userID","unfollowUser","setUsers","setUsersAC","length","photoUrl","followed","fullName","status","location","city","country","u","styles","alt","photo","btn","cont","App","render","Friends","friends","icon","img","sidebarReducer","rootReducer","combineReducers","store","createStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.310a84f9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1C7Zc\",\"item\":\"Navbar_item__15cQL\",\"activelink\":\"Navbar_activelink__1gBYA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialog_dialogs__E5UCW\",\"dialogsItems\":\"Dialog_dialogsItems__3nlHc\",\"active\":\"Dialog_active__3F6n8\",\"dialog\":\"Dialog_dialog__2sSBZ\",\"messages\":\"Dialog_messages__1LInz\",\"message\":\"Dialog_message__3p3Ti\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Users_body__3GaFB\",\"photo\":\"Users_photo__127Uo\",\"cont\":\"Users_cont__3xesI\",\"btn\":\"Users_btn__2gmOb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3V4QJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2cFRK\",\"posts\":\"MyPosts_posts__2HJjb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item___WLl_\",\"active\":\"Post_active__33OuD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__p-NGr\"};","import React from 'react';\nimport s from './Header.module.css';\n\nconst Header = () => {\n    return (\n        <header className={s.header}>\n            <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR_-I86af1RynC0u9KgHKUD-H6tCwT_Cf_P2Q&usqp=CAU\"/>\n        </header>\n    )\n\n}\n\nexport default Header;","import React from 'react';\nimport s from './Navbar.module.css';\nimport {NavLink} from 'react-router-dom';\nimport {FriendsType, SitebarType, StateType} from '../../redux/store';\nimport Navigation from './Navigation/Navigation';\n\nexport type SitebarTypeProps = {\n    // appState: StateType\n}\n\nconst Navbar: React.FC<SitebarTypeProps> = (prpps) => {\n    return (\n        (\n            <nav className={s.nav}>\n\n                <div className={s.item}>\n                    <NavLink to=\"/profile\" activeClassName={s.activelink}> Profile </NavLink>\n                </div>\n                <div className={s.item}>\n                    <NavLink to=\"/dialogs\" activeClassName={s.activelink}> Messages </NavLink>\n                </div>\n                <div className={s.item}>\n                    <NavLink to=\"/users\" activeClassName={s.activelink}> Users </NavLink>\n                </div>\n                <div className={s.item}>\n                    <NavLink to=\"/news\" activeClassName={s.activelink}> News </NavLink>\n                </div>\n                <div className={s.item}>\n                    <NavLink to=\"/music\" activeClassName={s.activelink}> Music </NavLink>\n                </div>\n                <div className={s.item}>\n                    <NavLink to=\"/setting\" activeClassName={s.activelink}> Settings </NavLink>\n                </div>\n                <div className={s.item}>\n                    <NavLink to=\"/friends\" activeClassName={s.activelink}> Friends </NavLink>\n                </div>\n\n            </nav>\n        )\n    )\n}\nexport default Navbar;\n","import React from 'react';\nimport s from './ProfileInfo.module.css';\n\nconst ProfileInfo = () => {\n    return (\n        <div className={s.content}>\n            <div>\n                <img\n                    src=\"https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&h=350\"/>\n            </div>\n            <div className={s.descriptionBlock}>\n                {/*<img src=\"https://upload.wikimedia.org/wikipedia/commons/8/8e/Kot-019.jpg\"/>*/}\n                ava + description\n            </div>\n\n        </div>\n    )\n}\nexport default ProfileInfo;\n","import React from 'react';\nimport s from './Post.module.css';\n\nexport type PostPropsType = {\n    message: string\n    likesCount: number\n}\n\nconst Post = (props: PostPropsType) => {\n    return (\n        <div className={`${s.item} ${s.active}`}>\n            <img src='https://i.guim.co.uk/img/media/bf7e98bd289d189e5b86d3f406f740368c663a6a/85_0_2544_1527/master/2544.jpg?width=1200&height=1200&quality=85&auto=format&fit=crop&s=98cd2e37e0df5d552473c329d88349ee'/>\n            {props.message}\n            <div>\n                <span>like: {props.likesCount}</span>\n            </div>\n        </div>\n    )\n}\nexport default Post;\n","import {ActionsTypes,  ProfilePageType} from './store';\nimport {DialogType} from './dialogsReducer';\n\nconst ADD_POST = 'ADD-POST';\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\n\nexport type PostsItemType = {\n    id: number\n    message: string\n    likesCount: number\n}\n\nlet initialState = {\n    postsData: [\n        {id: 1, message: 'Hi, how are you', likesCount: 12},\n        {id: 2, message: 'It\\'s my first post', likesCount: 15},\n        {id: 3, message: 'yo yo yo', likesCount: 17},\n    ] as Array<PostsItemType>,\n    newPostText: 'it-kamasutra.com'\n};\n\nexport type initialStateType = typeof initialState\n\nconst profileReducer = (state: initialStateType = initialState, action: ActionsTypes): initialStateType => {\n    switch (action.type) {\n        case ADD_POST: {\n            const newPost: PostsItemType = {\n                id: new Date().getTime(),\n                message: state.newPostText,\n                likesCount: 0,\n            }\n            return  {\n                ...state,\n                postsData: [...state.postsData, newPost],\n                newPostText: '' /*очищает поле ввода после добавления поста*/\n            };\n        }\n        case UPDATE_NEW_POST_TEXT: {\n            return {\n                ...state,\n                newPostText: action.newText\n            }\n        }\n\n        default:\n            return state;\n    }\n}\n\nexport const addPostAC = (newPostText: string) => {\n    return {\n        type: ADD_POST,\n        newPostText: newPostText\n    } as const\n}\nexport const changeNewTextAC = (newText: string) => {\n    return {\n        type: UPDATE_NEW_POST_TEXT,\n        newText: newText\n    } as const\n}\n\nexport default profileReducer;\n","import React, {ChangeEvent} from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post'\nimport {addPostAC, changeNewTextAC, PostsItemType} from '../../../redux/profileReducer';\nimport {AppDispatchType, AppStateType} from '../../../redux/redux-store';\nimport {connect} from 'react-redux';\nimport {MapDispatchToPropsType, MapStateToPropsType, MyPostType} from './types';\n\nconst MyPosts = (props: MyPostType) => {\n    const postElements = props.postsData.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\n\n    const newPostElement = React.createRef<HTMLTextAreaElement>();\n\n    const addPost = () => {   /*добавляет пост*/\n        if (newPostElement.current) {\n            props.addPost('');\n            /*props.updateNewPostText('')*/ /*очищает поле ввода после добавления поста*/\n        }\n    }\n    const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        props.onPostChange(e.currentTarget?.value);\n        // let text = e.currentTarget?.value;\n    }\n    //     обработчик принимает событие event\n    //     типизируем event - ChangeEvent - внутри типизируем на какой элемент событие прилетает\n    //     в данном случае событие прилетает на HTMLTextAreaElement\n    return (\n        <div className={s.postsBlock}>\n            {props.postsData[1].message}\n            <h3>My posts</h3>\n            <div>\n                <div>\n                    <textarea\n                        onChange={onPostChange}\n                        ref={newPostElement}\n                        value={props.newPostText}\n                    />\n                </div>\n                <div>\n                    <button onClick={addPost}>Add post</button>\n                </div>\n            </div>\n            <div className={s.posts}>\n                {postElements}\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    // no debugger\n    postsData: state.profilePage.postsData,\n    newPostText: state.profilePage.newPostText,\n})\nconst mapDispatchToProps = (dispatch: AppDispatchType): MapDispatchToPropsType  => {\n    // yes debugger\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(addPostAC(newPostText))\n        },\n        onPostChange: (text: string) => {\n            dispatch(changeNewTextAC(text))\n        }\n    }\n}\n\nexport const MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(\n    mapStateToProps, mapDispatchToProps\n)(MyPosts)\n","import React from 'react';\nimport s from './Profile.module.css';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\n// import {StoreType} from '../../redux/store';\nimport {MyPostsContainer} from './MyPosts/MyPosts';\n\ntype ProfilePropsType = {\n\n}\n\nconst Profile = (props: ProfilePropsType) => {\n\n    return (\n        <div className={s.content}>\n            <ProfileInfo/>\n            <MyPostsContainer/>\n\n        </div>\n    )\n}\nexport default Profile;\n","import React from \"react\";\nimport s from './News.module.css'\n\nconst News = () => {\n    return (\n        <div>\n            NEWS\n        </div>\n    )\n}\n\nexport default News;","import React from \"react\";\nimport s from './Music.module.css'\n\nconst Music = () => {\n    return (\n        <div>\n            Music\n        </div>\n    )\n}\n\nexport default Music;","import React from \"react\";\nimport s from './Setting.module.css'\n\nconst Setting = () => {\n    return (\n        <div>\n            Setting\n        </div>\n    )\n}\n\nexport default Setting;","import React from 'react';\nimport s from './Friends.module.css';\nimport {SitebarType} from '../../../redux/store';\nimport Message from '../../Dialogs/Message/Message';\n\ntype FriendTypeProps = {\n    // photo: SitebarType\n}\n\nconst MyFriends: React.FC<FriendTypeProps> = (props) => {\n\n    // let friendsElements = props.photo.icon.map(f => <Friends key={f.id}/>);\n    // let messagesElements = props.messages.map(m => <Message name={m.name}/>);\n\n    return (\n      <div>\n          <div>\n              {/*{friendsElements}*/}\n          </div>\n          <div>\n              {/*{messagesElements}*/}\n          </div>\n      </div>\n    )\n}\n\nexport default MyFriends;\n","import {ActionsTypes} from './store';\n\nconst UPDATE_NEW_MESSAGE_BODY = 'UPDATE-NEW-MESSAGE-BODY';\nconst SEND_MESSAGE = 'SEND-MESSAGE ';\n\n\nexport type DialogType = {\n    id: number\n    name: string\n}\n\nexport type MessagesType = {\n    id: number\n    message: string\n}\n\nconst initialState = {\n    dialogs: [\n        {id: 1, name: 'Dimych'},\n        {id: 2, name: 'Andrey'},\n        {id: 3, name: 'Sveta'},\n        {id: 4, name: 'Sasha'},\n        {id: 5, name: 'Valera'},\n        {id: 6, name: 'Viktor'},\n    ] as Array<DialogType>,\n    messages: [\n        {id: 1, message: 'Hello!!!'},\n        {id: 2, message: 'Haw are you?'},\n        {id: 3, message: 'This is my friend.'},\n        {id: 4, message: 'yo'},\n        {id: 5, message: 'yo'},\n    ] as Array<MessagesType>,\n    newMessageBody: '' as string\n};\n\nexport type initialStateType = typeof initialState\n\nexport const dialogsReducer = (state: initialStateType = initialState, action: ActionsTypes): initialStateType => {\n    switch (action.type) {\n        case UPDATE_NEW_MESSAGE_BODY:\n            return  {\n                ...state,\n                newMessageBody: action.body\n            };\n        case SEND_MESSAGE:\n            let body = state.newMessageBody;\n            return  {\n                ...state,\n                newMessageBody: '',\n                messages: [...state.messages, {id: 6, message: body}]\n            };\n        default:\n            return state;\n    }\n}\n\nexport const updateNewMessageBodyAC = (body: string) => {\n    return {\n        type: UPDATE_NEW_MESSAGE_BODY,\n        body: body\n    } as const\n}\nexport const sendMessageAC = () => {\n    return {\n        type: SEND_MESSAGE,\n    } as const\n}\n\nexport default dialogsReducer;\n","import React from 'react';\nimport s from './../Dialog.module.css'\n\n\nexport type MessageItemProps = {\n    message: string\n}\n\n\nconst Message: React.FC<MessageItemProps> = (props) => {\n    return <div className={s.dialog}> {props.message} </div>\n}\n\n\nexport default Message;\n","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './../Dialog.module.css'\n\nexport type DialogItemProps = {\n    name: string\n    id: number\n}\n\nconst DialogItem: React.FC<DialogItemProps> = (props) => {\n    let path = '/dialogs/' + props.id;\n\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={path} className={s.dialog} activeClassName={s.active}>{props.name}</NavLink>\n        </div>\n    )\n}\n\n\nexport default DialogItem;\n","import React, {ChangeEvent} from 'react';\nimport s from './Dialog.module.css'\nimport Message from './Message/Message';\nimport DialogItem from './DialogItem/DialogItem';\nimport {DialogsPageDataType} from '../../types/types';\nimport {initialStateType} from '../../redux/dialogsReducer';\nimport {AppStateType} from '../../redux/redux-store';\nimport {MessagesPageType} from '../../redux/store';\n\n\nexport type DialogsPropsType= {\n    // state: initialStateType\n    // appPost: (text: string) => void\n    updateNewMessageBody: (body: string) => void\n    sendMessage: () => void\n    dialogsPage: MessagesPageType\n}\n\n\nconst Dialogs = (props: DialogsPropsType) => {\n    const dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\n    // let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>);\n    const messagesElements = props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id}/>);\n    // let messagesElements = state.messages.map(m => <Message message={m.message}/>);\n    const newMessageBody = props.dialogsPage.newMessageBody;\n\n    // let newMessageElement = React.createRef<HTMLTextAreaElement>()\n\n    const onSendMessageClick = () => {\n        props.sendMessage()\n    }\n\n    const onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        let body = e.target.value;\n        props.updateNewMessageBody(body);\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n\n            </div>\n            <div className={s.messages}>\n                <div>{messagesElements}</div>\n                <div>\n                    <div><textarea value={newMessageBody}\n                                   onChange={onNewMessageChange}\n                                   placeholder=\"Enter your message\"></textarea></div>\n                    <div>\n                        <button onClick={onSendMessageClick}> Sent</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Dialogs;\n","import React from 'react';\nimport {initialStateType, sendMessageAC, updateNewMessageBodyAC} from '../../redux/dialogsReducer';\nimport {connect} from 'react-redux';\nimport {AppDispatchType, AppStateType} from '../../redux/redux-store';\nimport Dialogs from './Dialogs';\n\n\n// export type MessagesPageType = {\n//     dialogs: Array<DialogType>\n//     messages: Array<MessagesType>\n//     newMessageBody: string\n// }\n\ntype MapStateToPropsType = {\n    dialogsPage: initialStateType\n}\n\ntype MapDispatchToPropsType = {\n    updateNewMessageBody: (body: string) => void\n    sendMessage: () => void\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage /*state.dialogsPage*/\n    }\n}\nconst mapDispatchToProps = (dispatch: AppDispatchType): MapDispatchToPropsType => {\n    return {\n        updateNewMessageBody: (body: string) => {\n\n            dispatch(updateNewMessageBodyAC(body))\n        },\n        sendMessage: () => {\n            dispatch(sendMessageAC())\n        }\n    }\n}\n\n// @ts-ignore\nconst DialogsContainer = connect (mapStateToProps, mapDispatchToProps) (Dialogs);\n\nexport default DialogsContainer;\n","import {DispatchActionsType, FollowUserAT, SetUsersAT, UnfollowUserAT} from '../types/dispatchTypes';\r\nimport {UsersPageDataType, UserType} from '../types/types';\r\n\r\nconst initialState = {\r\n    users: [],\r\n}\r\n\r\nexport const usersReducer = (state: UsersPageDataType = initialState, action: DispatchActionsType) => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.userID ? {...u, followed: true} : u)\r\n            }\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.userID ? {...u, followed: false} : u)\r\n            }\r\n        case 'SET-USERS':\r\n            return {\r\n                ...state,\r\n                users: [/*...state.users,*/ ...action.users]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const followAC = (userID: number): FollowUserAT => {\r\n    return {type: 'FOLLOW', userID}\r\n}\r\n\r\nexport const unfollowAC = (userID: number): UnfollowUserAT => {\r\n    return {type: 'UNFOLLOW', userID}\r\n}\r\n\r\nexport const setUsersAC = (users: UserType[]): SetUsersAT => {\r\n    return {type: 'SET-USERS', users}\r\n}\r\n","import React from 'react';\r\nimport {AppDispatchType, AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {followAC, setUsersAC, unfollowAC} from \"../../redux/usersReducer\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {Users} from './Users';\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        usersPageData: state.usersPageData\r\n    }\r\n}\r\n\r\nexport const mapDispatchToProps = (dispatch: AppDispatchType) => {\r\n    return {\r\n        followUser: (userId: number) => {\r\n            dispatch(followAC(userId))\r\n        },\r\n        unfollowUser: (userId: number) => {\r\n            dispatch(unfollowAC(userId))\r\n        },\r\n        setUsers: (users: UserType[]) => {\r\n            dispatch(setUsersAC(users))\r\n        }\r\n    }\r\n}\r\n\r\nexport const UsersContainer = connect(mapStateToProps, mapDispatchToProps) (Users);\r\n","import React from 'react';\r\nimport styles from './Users.module.css'\r\nimport {UsersPageDataType, UserType} from '../../types/types';\r\n\r\ntype UsersPropsType = {\r\n    usersPageData: UsersPageDataType\r\n    followUser: (userID: number) => void\r\n    unfollowUser: (userID: number) => void\r\n    setUsers: (users: UserType[]) => void\r\n}\r\n\r\nexport const Users = (props: UsersPropsType) => {\r\n    debugger\r\n    if (props.usersPageData.users.length === 0) {\r\n        props.setUsers([\r\n            {\r\n                id: 1,\r\n                photoUrl: 'https://radiustheme.com/demo/html/cirkle/media/team/team_1.jpg',\r\n                followed: true,\r\n                fullName: 'Artem',\r\n                status: 'I am the boss',\r\n                location: {city: 'Praha', country: 'Cech republic'}\r\n            },\r\n            {\r\n                id: 2,\r\n                photoUrl: 'https://radiustheme.com/demo/html/cirkle/media/team/team_5.jpg',\r\n                followed: false,\r\n                fullName: 'Luba',\r\n                status: 'I am a student',\r\n                location: {city: 'New York', country: 'USA'}\r\n            },\r\n            {\r\n                id: 3,\r\n                photoUrl: 'https://radiustheme.com/demo/html/cirkle/media/team/team_3.jpg',\r\n                followed: false,\r\n                fullName: 'Ivan Boroda',\r\n                status: 'I am boss too',\r\n                location: {city: 'Kiev', country: 'Ukraine'}\r\n            },\r\n        ])\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.usersPageData.users.map(u => <div key={u.id} className={styles.body}>\r\n                <span>\r\n                    <div><img src={u.photoUrl} alt=\"avatar\" className={styles.photo}/></div>\r\n                    <div>{u.followed\r\n                        ? <button onClick={() => props.unfollowUser(u.id)} className={styles.btn}>Unfollow</button>\r\n                        : <button onClick={() => props.followUser(u.id)} className={styles.btn}>Follow</button>}</div>\r\n                </span>\r\n                <span className={styles.cont}>\r\n                    <span>\r\n                        <div>{u.fullName}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{u.location.country}</div>\r\n                        <div>{u.location.city}</div>\r\n                    </span>\r\n                </span>\r\n            </div>)}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport {Route} from 'react-router-dom';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport Navbar from './components/Navbar/Navbar';\nimport Profile from './components/Profile/Profile';\nimport News from './components/News/News';\nimport Music from './components/Music/Music';\nimport Setting from './components/Setting/Setting';\n// import store from './redux/store';\nimport Friends from './components/Navbar/Friends/Friends';\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\nimport { Users } from './components/Users/Users';\nimport { UsersContainer } from './components/Users/UsersContainer';\n// import {store} from './redux/redux-store';\n\nexport type AppPropsType = {\n\n}\n\nconst App: React.FC<AppPropsType> = (props) => {\n    // const state = props.store.getState()\n\n    // @ts-ignore\n    return (\n        <div className=\"app-wrapper\">\n            <Header/>\n            <Navbar/>\n            <div className={'app-wrapper-content'}>\n                <Route path={'/dialogs'}\n                       render={() => <DialogsContainer />}/>\n                <Route path={'/profile'}\n                       render={() => <Profile />}/>\n                <Route path={'/users'}\n                       render={() => <UsersContainer/>}/>\n                <Route path={'/news'} render={() => <News/>}/>\n                <Route path={'/music'} render={() => <Music/>}/>\n                <Route path={'/setting'} render={() => <Setting/>}/>\n                <Route path={'/friends'} render={() => <Friends />}/>\n            </div>\n        </div>\n    )\n}\n\n\nexport default App;\n","import {ActionsTypes, SitebarType} from './store';\n\nlet initialState = {\n    friends: [\n        {id: 1, name: 'Andrey'},\n        {id: 2, name: 'Sasha'},\n        {id: 3, name: 'Viktor'},\n    ],\n    icon: [\n        {id: 1, img: 'https://radiustheme.com/demo/html/cirkle/media/team/team_4.jpg'},\n        {id: 2, img: 'https://radiustheme.com/demo/html/cirkle/media/team/team_1.jpg'},\n        {id: 3, img: 'https://radiustheme.com/demo/html/cirkle/media/team/team_2.jpg'},\n        {id: 4, img: 'https://radiustheme.com/demo/html/cirkle/media/team/team_3.jpg'},\n    ]\n};\n\nconst sidebarReducer = (state: SitebarType = initialState, action: ActionsTypes) => {\n\n    return state;\n}\n\nexport default sidebarReducer;\n","import {combineReducers, createStore} from 'redux';\nimport profileReducer from './profileReducer';\nimport dialogsReducer from './dialogsReducer';\nimport sidebarReducer from './sidebarReducer';\nimport {usersReducer} from './usersReducer';\n\nexport const rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    sidebarReducer: sidebarReducer,\n    usersPageData: usersReducer,\n})\n\n\n\nexport type AppStateType = ReturnType<typeof store.getState>;\nexport type AppDispatchType = typeof store.dispatch;\nexport type StoreType = typeof store;\n\nconst store = createStore(rootReducer);\nexport default store;\n\n// export type AppStateType = ReturnType<typeof rootReducer>\n//\n// export const store = createStore(rootReducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter, HashRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport store, {rootReducer} from './redux/redux-store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App  />\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n\n// function rerenderEntireTree() {\n//\n// }\n\n// rerenderEntireTree();\n// store.subscribe(rerenderEntireTree);\n"],"sourceRoot":""}