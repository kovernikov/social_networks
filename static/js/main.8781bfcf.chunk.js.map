{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Dialog.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.module.css","redux/profileReducer.tsx","redux/dialogsReducer.tsx","redux/sidebarReducer.tsx","redux/store.ts","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","StoreContext.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Setting/Setting.tsx","components/Navbar/Friends/Friends.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","App.tsx","index.tsx"],"names":["module","exports","ADD_POST","UPDATE_NEW_POST_TEXT","initialState","postsData","id","message","likesCount","newPostText","profileReducer","state","action","type","newPost","Date","getTime","push","newText","UPDATE_NEW_MESSAGE_BODY","SEND_MESSAGE","dialogs","name","messages","newMessageBody","dialogsReducer","body","friends","icon","img","sidebarReducer","store","_state","profilePage","dialogsPage","sidebar","_onChange","console","log","subscribe","observer","this","getState","dispatch","Header","className","s","header","src","Navbar","prpps","nav","item","to","activeClassName","activelink","ProfileInfo","content","descriptionBlock","Post","props","active","MyPosts","postElements","map","p","newPostElement","React","createRef","postsBlock","onChange","e","updateNewPostText","currentTarget","value","ref","onClick","current","appPost","posts","StoreContext","createContext","Provider","children","MyPostsContainer","Consumer","text","Profile","News","Music","Setting","MyFriends","Message","dialog","DialogItem","path","Dialogs","dialogsElements","d","messagesElements","m","dialogsItems","target","updateNewMessageBody","placeholder","sendMessage","DialogsContainer","updateNewMessageBodyAC","App","render","Friends","photo","rerenderEntireTree","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8781bfcf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1C7Zc\",\"item\":\"Navbar_item__15cQL\",\"activelink\":\"Navbar_activelink__1gBYA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialog_dialogs__E5UCW\",\"dialogsItems\":\"Dialog_dialogsItems__3nlHc\",\"active\":\"Dialog_active__3F6n8\",\"dialog\":\"Dialog_dialog__2sSBZ\",\"messages\":\"Dialog_messages__1LInz\",\"message\":\"Dialog_message__3p3Ti\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3V4QJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2cFRK\",\"posts\":\"MyPosts_posts__2HJjb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item___WLl_\",\"active\":\"Post_active__33OuD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__p-NGr\"};","import {ActionsTypes, PostsItemType, ProfilePageType} from './store';\n\nconst ADD_POST = 'ADD-POST';\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\n\nlet initialState = {\n    postsData: [\n        {id: 1, message: 'Hi, how are you', likesCount: 12},\n        {id: 2, message: 'It\\'s my first post', likesCount: 15},\n        {id: 3, message: 'yo yo yo', likesCount: 17},\n    ],\n    newPostText: 'it-kamasutra.com'\n};\n\nconst profileReducer = (state: ProfilePageType = initialState, action: ActionsTypes) => {\n    switch (action.type) {\n        case ADD_POST:\n            const newPost: PostsItemType = {\n                id: new Date().getTime(),\n                message: state.newPostText,\n                likesCount: 0,\n            }\n            state.postsData.push(newPost);\n            state.newPostText = ''; /*очищает поле ввода после добавления поста*/\n            return state;\n        case UPDATE_NEW_POST_TEXT:\n            state.newPostText = action.newText;\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport const addPostAC = (newPostText: string) => {\n    return {\n        type: ADD_POST,\n        newPostText: newPostText\n    } as const\n}\nexport const changeNewTextAC = (newText: string) => {\n    return {\n        type: UPDATE_NEW_POST_TEXT,\n        newText: newText\n    } as const\n}\n\nexport default profileReducer;\n","import {ActionsTypes, MessagesPageType} from './store';\n\nconst UPDATE_NEW_MESSAGE_BODY = 'UPDATE-NEW-MESSAGE-BODY';\nconst SEND_MESSAGE = 'SEND-MESSAGE ';\n\nlet initialState = {\n    dialogs: [\n        {id: 1, name: 'Dimych'},\n        {id: 2, name: 'Andrey'},\n        {id: 3, name: 'Sveta'},\n        {id: 4, name: 'Sasha'},\n        {id: 5, name: 'Valera'},\n        {id: 6, name: 'Viktor'},\n    ],\n    messages: [\n        {id: 1, message: 'Hello!!!'},\n        {id: 2, message: 'Haw are you?'},\n        {id: 3, message: 'This is my friend.'},\n        {id: 4, message: 'yo'},\n        {id: 5, message: 'yo'},\n    ],\n    newMessageBody: ''\n};\n\nconst dialogsReducer = (state: MessagesPageType = initialState, action: ActionsTypes) => {\n    switch (action.type) {\n        case UPDATE_NEW_MESSAGE_BODY:\n            state.newMessageBody = action.body;\n            return state;\n        case SEND_MESSAGE:\n            let body = state.newMessageBody;\n            state.newMessageBody = '';\n            state.messages.push({id: 6, message: body});\n            return state;\n\n        default:\n            return state;\n    }\n}\n\nexport const updateNewMessageBodyAC = (body: string) => {\n    return {\n        type: UPDATE_NEW_MESSAGE_BODY,\n        body: body\n    } as const\n}\nexport const sendMessageAC = () => {\n    return {\n        type: SEND_MESSAGE,\n    } as const\n}\n\nexport default dialogsReducer;\n","import {ActionsTypes, SitebarType} from './store';\n\nlet initialState = {\n    friends: [\n        {id: 1, name: 'Andrey'},\n        {id: 2, name: 'Sasha'},\n        {id: 3, name: 'Viktor'},\n    ],\n    icon: [\n        {id: 1, img: 'https://radiustheme.com/demo/html/cirkle/media/team/team_4.jpg'},\n        {id: 2, img: 'https://radiustheme.com/demo/html/cirkle/media/team/team_1.jpg'},\n        {id: 3, img: 'https://radiustheme.com/demo/html/cirkle/media/team/team_2.jpg'},\n        {id: 4, img: 'https://radiustheme.com/demo/html/cirkle/media/team/team_3.jpg'},\n    ]\n};\n\nconst sidebarReducer = (state: SitebarType = initialState, action: ActionsTypes) => {\n\n    return state;\n}\n\nexport default sidebarReducer;\n","import profileReducer, {addPostAC, changeNewTextAC} from './profileReducer';\nimport dialogsReducer, {sendMessageAC, updateNewMessageBodyAC} from './dialogsReducer';\nimport sidebarReducer from './sidebarReducer';\n\nexport type PostsItemType = {\n    id: number\n    message: string\n    likesCount: number\n}\n\ntype DialogType = {\n    id: number\n    name: string\n}\n\ntype MessagesType = {\n    id: number\n    message: string\n}\n\nexport type IconsType = {\n    id: number\n    img: string\n}\n\nexport type FriendsType = {\n    id: number\n    name: string\n}\n\nexport type SitebarType = {\n    friends: Array<FriendsType>\n    icon: Array<IconsType>\n}\n\nexport type ProfilePageType = {\n    postsData: Array<PostsItemType>\n    newPostText: string\n}\n\nexport type MessagesPageType = {\n    dialogs: Array<DialogType>\n    messages: Array<MessagesType>\n    newMessageBody: string\n}\n\nexport type StateType = {\n    profilePage: ProfilePageType\n    dialogsPage: MessagesPageType\n    sidebar: SitebarType\n}\n\nexport  type StoreType = {\n    _state: StateType\n    _onChange: () => void\n    subscribe: (observer: () => void) => void\n    getState: () => StateType\n    dispatch: (action: ActionsTypes) => void\n}\n\nexport type ActionsTypes =\n    ReturnType<typeof addPostAC>\n    | ReturnType<typeof changeNewTextAC>\n    | ReturnType<typeof updateNewMessageBodyAC>\n    | ReturnType<typeof sendMessageAC>\n\nconst store: StoreType = {\n    _state: {\n        profilePage: {\n            postsData: [\n                {id: 1, message: 'Hi, how are you', likesCount: 12},\n                {id: 2, message: 'It\\'s my first post', likesCount: 15},\n                {id: 3, message: 'yo yo yo', likesCount: 17},\n            ],\n            newPostText: 'it-kamasutra.com'\n        },\n        dialogsPage: {\n            dialogs: [\n                {id: 1, name: 'Dimych'},\n                {id: 2, name: 'Andrey'},\n                {id: 3, name: 'Sveta'},\n                {id: 4, name: 'Sasha'},\n                {id: 5, name: 'Valera'},\n                {id: 6, name: 'Viktor'},\n            ],\n            messages: [\n                {id: 1, message: 'Hello!!!'},\n                {id: 2, message: 'Haw are you?'},\n                {id: 3, message: 'This is my friend.'},\n                {id: 4, message: 'yo'},\n                {id: 5, message: 'yo'},\n            ],\n            newMessageBody: ''\n        },\n        sidebar: {\n            friends: [\n                {id: 1, name: 'Andrey'},\n                {id: 2, name: 'Sasha'},\n                {id: 3, name: 'Viktor'},\n            ],\n            icon: [\n                {id: 1, img: 'https://radiustheme.com/demo/html/cirkle/media/team/team_4.jpg'},\n                {id: 2, img: 'https://radiustheme.com/demo/html/cirkle/media/team/team_1.jpg'},\n                {id: 3, img: 'https://radiustheme.com/demo/html/cirkle/media/team/team_2.jpg'},\n                {id: 4, img: 'https://radiustheme.com/demo/html/cirkle/media/team/team_3.jpg'},\n            ]\n        }\n    },\n    _onChange() {\n        console.log('State changed');\n    },\n\n    subscribe(observer) {\n        this._onChange = observer\n    },\n    getState() {\n        return this._state;\n    },\n\n    dispatch(action) {\n\n        this._state.profilePage = profileReducer(this._state.profilePage, action);\n        this._state.dialogsPage = dialogsReducer(this._state.dialogsPage, action);\n        this._state.sidebar = sidebarReducer(this._state.sidebar, action);\n\n        this._onChange();\n    }\n\n}\n\nexport default store;\n","import React from 'react';\nimport s from './Header.module.css';\n\nconst Header = () => {\n    return (\n        <header className={s.header}>\n            <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR_-I86af1RynC0u9KgHKUD-H6tCwT_Cf_P2Q&usqp=CAU\"/>\n        </header>\n    )\n\n}\n\nexport default Header;","import React from 'react';\nimport s from './Navbar.module.css';\nimport {NavLink} from 'react-router-dom';\nimport {FriendsType, SitebarType, StateType} from '../../redux/store';\nimport Navigation from './Navigation/Navigation';\n\nexport type SitebarTypeProps = {\n    // appState: StateType\n}\n\nconst Navbar: React.FC<SitebarTypeProps> = (prpps) => {\n    return (\n        (\n            <nav className={s.nav}>\n\n                <div className={s.item}>\n                    <NavLink to=\"/profile\" activeClassName={s.activelink}> Profile </NavLink>\n                </div>\n                <div className={s.item}>\n                    <NavLink to=\"/dialogs\" activeClassName={s.activelink}> Messages </NavLink>\n                </div>\n                <div className={s.item}>\n                    <NavLink to=\"/news\" activeClassName={s.activelink}> News </NavLink>\n                </div>\n                <div className={s.item}>\n                    <NavLink to=\"/music\" activeClassName={s.activelink}> Music </NavLink>\n                </div>\n                <div className={s.item}>\n                    <NavLink to=\"/setting\" activeClassName={s.activelink}> Settings </NavLink>\n                </div>\n                <div className={s.item}>\n                    <NavLink to=\"/friends\" activeClassName={s.activelink}> Friends </NavLink>\n                </div>\n\n            </nav>\n        )\n    )\n}\nexport default Navbar;\n","import React from 'react';\nimport s from './ProfileInfo.module.css';\n\nconst ProfileInfo = () => {\n    return (\n        <div className={s.content}>\n            <div>\n                <img\n                    src=\"https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&h=350\"/>\n            </div>\n            <div className={s.descriptionBlock}>\n                {/*<img src=\"https://upload.wikimedia.org/wikipedia/commons/8/8e/Kot-019.jpg\"/>*/}\n                ava + description\n            </div>\n\n        </div>\n    )\n}\nexport default ProfileInfo;\n","import React from 'react';\nimport s from './Post.module.css';\n\nexport type PostPropsType = {\n    message: string\n    likesCount: number\n}\n\nconst Post = (props: PostPropsType) => {\n    return (\n        <div className={`${s.item} ${s.active}`}>\n            <img src='https://i.guim.co.uk/img/media/bf7e98bd289d189e5b86d3f406f740368c663a6a/85_0_2544_1527/master/2544.jpg?width=1200&height=1200&quality=85&auto=format&fit=crop&s=98cd2e37e0df5d552473c329d88349ee'/>\n            {props.message}\n            <div>\n                <span>like: {props.likesCount}</span>\n            </div>\n        </div>\n    )\n}\nexport default Post;\n","import React, {ChangeEvent} from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post'\nimport {PostsItemType} from '../../../redux/store';\n\n\ntype MyPostType = {\n    postsData: Array<PostsItemType>\n    appPost: (newPostText: string) => void\n    newPostText: string\n    updateNewPostText: (newText: string) => void\n}\n\n\nconst MyPosts = (props: MyPostType) => {\n\n    let postElements = props.postsData.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\n\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\n\n    let addPost = () => {   /*добавляет пост*/\n        if (newPostElement.current) {\n            props.appPost('');\n            /*props.updateNewPostText('')*/ /*очищает поле ввода после добавления поста*/\n        }\n    }\n\n    // const onPostChange = () => { /*вводит тест*/\n    //     if (newPostElement.current) {\n    //         props.updateNewPostText(newPostElement.current?.value);\n    //     }\n    // }\n\n    const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        props.updateNewPostText(e.currentTarget?.value);\n        // let text = e.currentTarget?.value;\n    }\n    //     обработчик принимает событие event\n    //     типизируем event - ChangeEvent - внутри типизируем на какой элемент событие прилетает\n    //     в данном случае событие прилетает на HTMLTextAreaElement\n\n\n    return (\n        <div className={s.postsBlock}>\n\n            {props.postsData[1].message}\n\n            <h3>My posts</h3>\n            <div>\n                <div>\n                    <textarea onChange={onPostChange} ref={newPostElement} value={props.newPostText}/>\n                </div>\n                <div>\n                    <button onClick={addPost}>Add post</button>\n                </div>\n            </div>\n            <div className={s.posts}>\n                {postElements}\n            </div>\n        </div>\n    )\n}\nexport default MyPosts;\n","import React from 'react';\nimport store, {StoreType} from './redux/store';\nimport App from './App';\n\nconst StoreContext = React.createContext({} as StoreType)\n\nexport  type ProviderType = {\n    store: StoreType\n    children: React.ReactNode\n}\n\nexport const Provider = (props: ProviderType) => {\n    return (\n        <StoreContext.Provider value={props.store}>\n            {props.children}\n        </StoreContext.Provider>\n    )\n}\n\nexport default StoreContext;\n","import React from 'react';\nimport {addPostAC, changeNewTextAC} from '../../../redux/profileReducer';\nimport MyPosts from './MyPosts';\nimport StoreContext from '../../../StoreContext';\nimport {StoreType} from '../../../redux/store';\n\n\ntype MyPostsContainerType = {\n    // store: StoreType\n}\n\nconst MyPostsContainer = (props: MyPostsContainerType) => {\n\n    return (\n        <StoreContext.Consumer>\n            {\n                (store) => {\n\n                    let state = store.getState();\n                    let addPost = () => {   /*добавляет пост*/\n                        store.dispatch(addPostAC(store._state.profilePage.newPostText))\n                    }\n                    const onPostChange = (text: string) => {\n                        store.dispatch(changeNewTextAC(text))\n                        // props.dispatch({type: 'UPDATE-NEW-POST-TEXT', newText: text })\n                        // props.dispatch(changeNewTextAC(text))\n                    }\n\n                    return <MyPosts postsData={state.profilePage.postsData}\n                                    newPostText={state.profilePage.newPostText}\n                                    updateNewPostText={onPostChange}\n                                    appPost={addPost}/>\n                }\n            }\n        </StoreContext.Consumer>\n    )\n}\nexport default MyPostsContainer;\n","import React from 'react';\nimport s from './Profile.module.css';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport {StoreType} from '../../redux/store';\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\n\n\ntype ProfilePropsType = {\n\n}\n\nconst Profile = (props: ProfilePropsType) => {\n\n    return (\n        <div className={s.content}>\n            <ProfileInfo/>\n            <MyPostsContainer />\n\n        </div>\n    )\n}\nexport default Profile;\n","import React from \"react\";\nimport s from './News.module.css'\n\nconst News = () => {\n    return (\n        <div>\n            NEWS\n        </div>\n    )\n}\n\nexport default News;","import React from \"react\";\nimport s from './Music.module.css'\n\nconst Music = () => {\n    return (\n        <div>\n            Music\n        </div>\n    )\n}\n\nexport default Music;","import React from \"react\";\nimport s from './Setting.module.css'\n\nconst Setting = () => {\n    return (\n        <div>\n            Setting\n        </div>\n    )\n}\n\nexport default Setting;","import React from 'react';\nimport s from './Friends.module.css';\nimport {SitebarType} from '../../../redux/store';\nimport Message from '../../Dialogs/Message/Message';\n\ntype FriendTypeProps = {\n    photo: SitebarType\n}\n\nconst MyFriends: React.FC<FriendTypeProps> = (props) => {\n\n    // let friendsElements = props.photo.icon.map(f => <Friends key={f.id}/>);\n    // let messagesElements = props.messages.map(m => <Message name={m.name}/>);\n\n    return (\n      <div>\n          <div>\n              {/*{friendsElements}*/}\n          </div>\n          <div>\n              {/*{messagesElements}*/}\n          </div>\n      </div>\n    )\n}\n\nexport default MyFriends;\n","import React from 'react';\nimport s from './../Dialog.module.css'\n\n\nexport type MessageItemProps = {\n    message: string\n}\n\n\nconst Message: React.FC<MessageItemProps> = (props) => {\n    return <div className={s.dialog}> {props.message} </div>\n}\n\n\nexport default Message;\n","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './../Dialog.module.css'\n\nexport type DialogItemProps = {\n    name: string\n    id: number\n}\n\nconst DialogItem: React.FC<DialogItemProps> = (props) => {\n    let path = '/dialogs/' + props.id;\n\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={path} className={s.dialog} activeClassName={s.active}>{props.name}</NavLink>\n        </div>\n    )\n}\n\n\nexport default DialogItem;\n","import React, {ChangeEvent} from 'react';\nimport s from './Dialog.module.css'\nimport Message from './Message/Message';\nimport DialogItem from './DialogItem/DialogItem';\nimport {MessagesPageType} from '../../redux/store';\n\n\nexport type DialogsProps = {\n    state: MessagesPageType\n    // appPost: (text: string) => void\n    updateNewMessageBody: (body: string) => void\n    sendMessage: () => void\n}\n\n\nconst Dialogs: React.FC<DialogsProps> = (props) => {\n\n    let state = props.state\n\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>);\n    let messagesElements = state.messages.map(m => <Message message={m.message}/>);\n    let newMessageBody = state.newMessageBody;\n\n    let newMessageElement = React.createRef<HTMLTextAreaElement>()\n\n    let onSendMessageClick = () => {\n        props.sendMessage()\n    }\n\n    let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        let body = e.target.value;\n        props.updateNewMessageBody(body);\n        // props.onNewMessageChange(updateNewMessageBodyAC(body))\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n\n            </div>\n            <div className={s.messages}>\n                <div>{messagesElements}</div>\n                <div>\n                    <div><textarea value={newMessageBody}\n                                   onChange={onNewMessageChange}\n                                   placeholder=\"Enter your message\"></textarea></div>\n                    <div>\n                        <button onClick={props.sendMessage}> Sent</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Dialogs;\n","import React from 'react';\nimport {sendMessageAC, updateNewMessageBodyAC} from '../../redux/dialogsReducer';\nimport Dialogs from './Dialogs';\nimport StoreContext from '../../StoreContext';\nimport {StoreType} from '../../redux/store';\n\nexport type DialogsContainerPropsType = {\n    store: StoreType\n}\n\nconst DialogsContainer: React.FC<DialogsContainerPropsType> = (props) => {\n    return (\n        <StoreContext.Consumer>\n            {\n                (store) => {\n                    let state = store.getState().dialogsPage;\n                    let onSendMessageClick = () => {\n                        store.dispatch(sendMessageAC())\n                    }\n                    let onNewMessageChange = (body: string) => {\n                        // let body = e.target.value;\n                        store.dispatch(updateNewMessageBodyAC(body))\n                    }\n                    return <Dialogs state={state} updateNewMessageBody={onNewMessageChange}\n                                    sendMessage={onSendMessageClick}/>\n                }\n            }\n        </StoreContext.Consumer>\n    )\n}\n\nexport default DialogsContainer;\n","import React from 'react';\nimport {Route} from 'react-router-dom';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport Navbar from './components/Navbar/Navbar';\nimport Profile from './components/Profile/Profile';\nimport News from './components/News/News';\nimport Music from './components/Music/Music';\nimport Setting from './components/Setting/Setting';\nimport store, {StoreType} from './redux/store';\nimport Friends from './components/Navbar/Friends/Friends';\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\n\nexport type AppPropsType = {\n\n}\n\nconst App: React.FC<AppPropsType> = (props) => {\n    // const state = props.store.getState()\n\n    return (\n        <div className=\"app-wrapper\">\n            <Header/>\n            <Navbar/>\n            <div className={'app-wrapper-content'}>\n                {/*<Route path={'/sitbar'} render={() => <Navigation appState={props.appState}/>}/>*/}\n                <Route path={'/dialogs'}\n                       render={() => <DialogsContainer store={store} />}/>\n                <Route path={'/profile'}\n                       render={() => <Profile />}/>\n                <Route path={'/news'} render={() => <News/>}/>\n                <Route path={'/music'} render={() => <Music/>}/>\n                <Route path={'/setting'} render={() => <Setting/>}/>\n                <Route path={'/friends'} render={() => <Friends photo={store._state.sidebar}/>}/>\n            </div>\n        </div>\n    )\n}\n\n\nexport default App;\n","import store from './redux/store';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import {appPost, StateType, updateNewPostText} from './redux/state';\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from './StoreContext';\n\nfunction rerenderEntireTree() {\n    ReactDOM.render(\n        <React.StrictMode>\n            <BrowserRouter>\n                <Provider store={store}>\n                    <App />\n                </Provider>\n            </BrowserRouter>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\nrerenderEntireTree();\nstore.subscribe(rerenderEntireTree);\n"],"sourceRoot":""}